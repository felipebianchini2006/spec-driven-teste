@page "/books/{BookId:int}"
@inject BookApiService BookApiService
@inject NavigationManager Navigation
@inject ILogger<BookDetails> Logger

<PageTitle>@(book?.Title ?? "Detalhes do Livro")</PageTitle>

<div class="container mt-4">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
        </div>
    }
    else if (book == null)
    {
        <div class="alert alert-warning">
            <h4>Livro não encontrado</h4>
            <p>O livro que você está procurando não existe.</p>
            <button type="button" class="btn btn-primary" @onclick="NavigateBack">
                Voltar para a Estante
            </button>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <img src="@GetBookCoverUrl(book)" 
                     alt="Capa de @book.Title" 
                     class="img-fluid rounded shadow" />
            </div>
            <div class="col-md-8">
                <h1>@book.Title</h1>
                <h4 class="text-muted">@book.Author</h4>
                <p class="text-muted">
                    <small>Adicionado em @book.CreatedAt.ToString("dd/MM/yyyy")</small>
                </p>

                @if (book.Review != null)
                {
                    <div class="mt-3">
                        <h5>Sua Avaliação</h5>
                        <div class="d-flex align-items-center mb-2">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="bi bi-star-fill @(i <= book.Review.Rating ? "text-warning" : "text-muted")"></i>
                            }
                            <span class="ms-2">(@book.Review.Rating/5)</span>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(book.Review.ReviewText))
                        {
                            <p class="border-start border-3 ps-3">@book.Review.ReviewText</p>
                        }
                        <small class="text-muted">
                            Última atualização: @book.Review.UpdatedAt.ToString("dd/MM/yyyy HH:mm")
                        </small>
                    </div>
                }

                <hr class="my-4" />

                <div class="mt-4">
                    <ReviewForm BookId="@BookId" 
                               ExistingReview="@book.Review" 
                               OnReviewSaved="@HandleReviewSaved" 
                               OnCancel="@NavigateBackAsync" />
                </div>

                <button type="button" class="btn btn-secondary mt-3" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Voltar para a Estante
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int BookId { get; set; }

    private BookDto? book;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookAsync();
    }

    private async Task LoadBookAsync()
    {
        isLoading = true;
        try
        {
            Logger.LogInformation("Carregando detalhes do livro ID: {BookId}", BookId);

            book = await BookApiService.GetBookByIdAsync(BookId);

            if (book == null)
            {
                Logger.LogWarning("Livro não encontrado: ID {BookId}", BookId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar livro ID: {BookId}", BookId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleReviewSaved(ReviewDto savedReview)
    {
        Logger.LogInformation("Review salva, atualizando visualização do livro {BookId}", BookId);

        var refreshedBook = await BookApiService.GetBookByIdAsync(BookId);
        if (refreshedBook != null)
        {
            book = refreshedBook;
        }
        else if (book != null)
        {
            // fallback para manter review em caso de falha na API
            book.Review = savedReview;
        }

        StateHasChanged();
    }

    private string GetBookCoverUrl(BookDto book)
    {
        return string.IsNullOrWhiteSpace(book.CoverImageUrl) 
            ? "/images/book-placeholder.png" 
            : book.CoverImageUrl;
    }

    private void NavigateBack() => Navigation.NavigateTo("/", true);

    private Task NavigateBackAsync()
    {
        NavigateBack();
        return Task.CompletedTask;
    }
}
