@using EstanteVirtual.Web.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject BookApiService BookApiService

<div class="add-book-form">
    <h3>Adicionar Novo Livro</h3>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success" role="alert">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <EditForm Model="@bookModel" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        
        <div class="mb-3">
            <label for="title" class="form-label">Título*</label>
            <InputText id="title" class="form-control" @bind-Value="bookModel.Title" placeholder="Ex: Clean Code" />
            <ValidationMessage For="@(() => bookModel.Title)" />
        </div>

        <div class="mb-3">
            <label for="author" class="form-label">Autor*</label>
            <InputText id="author" class="form-control" @bind-Value="bookModel.Author" placeholder="Ex: Robert C. Martin" />
            <ValidationMessage For="@(() => bookModel.Author)" />
        </div>

        <div class="mb-3">
            <label for="coverUrl" class="form-label">URL da Capa (opcional)</label>
            <InputText id="coverUrl" class="form-control" @bind-Value="bookModel.CoverImageUrl" placeholder="https://exemplo.com/capa.jpg" />
            <ValidationMessage For="@(() => bookModel.CoverImageUrl)" />
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Salvando...</span>
                }
                else
                {
                    <span>Adicionar Livro</span>
                }
            </button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="ResetForm" disabled="@isSubmitting">
                Limpar
            </button>
        </div>
    </EditForm>
</div>

@code {
    private CreateBookModel bookModel = new();
    private bool isSubmitting = false;
    private string? successMessage;
    private string? errorMessage;

    [Parameter]
    public EventCallback<BookDto> OnBookAdded { get; set; }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            var createdBook = await BookApiService.CreateBookAsync(
                bookModel.Title,
                bookModel.Author,
                string.IsNullOrWhiteSpace(bookModel.CoverImageUrl) ? null : bookModel.CoverImageUrl
            );

            if (createdBook != null)
            {
                successMessage = $"Livro '{createdBook.Title}' adicionado com sucesso!";
                ResetForm();
                
                // Notificar componente pai se houver callback
                await OnBookAdded.InvokeAsync(createdBook);
            }
            else
            {
                errorMessage = "Erro ao adicionar livro. Verifique os dados e tente novamente.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro inesperado: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ResetForm()
    {
        bookModel = new CreateBookModel();
    }

    private class CreateBookModel
    {
        [Required(ErrorMessage = "O título é obrigatório.")]
        [StringLength(200, ErrorMessage = "O título não pode exceder 200 caracteres.")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "O autor é obrigatório.")]
        [StringLength(100, ErrorMessage = "O autor não pode exceder 100 caracteres.")]
        public string Author { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "A URL da capa não pode exceder 500 caracteres.")]
        public string? CoverImageUrl { get; set; }
    }
}
